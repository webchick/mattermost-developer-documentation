<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Mattermost Developers</title>
    <link>/blog/</link>
    <description>Recent content in Blogs on Mattermost Developers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 11 Jun 2020 12:00:00 -0400</lastBuildDate>
    
	<atom:link href="/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>From OpenVPN to Pritunl VPN: The transition</title>
      <link>/blog/pritunl/</link>
      <pubDate>Thu, 11 Jun 2020 12:00:00 -0400</pubDate>
      
      <guid>/blog/pritunl/</guid>
      <description>Usually organizations use an internal network to prevent unauthorized people from connecting to their private network and by using their own network infrastructure/connectivity they can maintain their desirable level of security for their data. But it would be convenient for users to connect to that private network while they are away from the office&amp;rsquo;s building, on their own internet connection. To solve that problem, VPN (Virtual Private Network) is used to allow authorized remote access to an organization&amp;rsquo;s private network.</description>
    </item>
    
    <item>
      <title>OpenTracing for Go Projects</title>
      <link>/blog/open-tracing/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 -0400</pubDate>
      
      <guid>/blog/open-tracing/</guid>
      <description>What is distributed tracing? Large-scale cloud applications are usually built using interconnected services that can be rather hard to troubleshoot. When a service is scaled, simple logging doesn&amp;rsquo;t cut it anymore and a more in-depth view into system&amp;rsquo;s flow is required. That&amp;rsquo;s where distributed tracing comes into play; it allows developers and SREs to get a detailed view of a request as it travels through the system of services. With distributed tracing you can:</description>
    </item>
    
    <item>
      <title>Getting Hands-on with io_uring using Go</title>
      <link>/blog/hands-on-iouring-go/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/hands-on-iouring-go/</guid>
      <description>In Linux, system calls (syscalls) are at the heart of everything. They are the primary interface through which an application interacts with the kernel. Therefore, it is vital that they are fast. And especially in a post-Spectre/Meltdown world, this is all the more important.
A major chunk of the syscalls deal with I/O, because that&amp;rsquo;s what most applications do. For network I/O, we&amp;rsquo;ve had the epoll family of syscalls which have provided us with reasonably fast performance.</description>
    </item>
    
    <item>
      <title>Advanced Git with the Free University of Tbilisi</title>
      <link>/blog/advanced-git-tbilisi-free-university/</link>
      <pubDate>Fri, 27 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/advanced-git-tbilisi-free-university/</guid>
      <description>On Monday, March 16, 2020, I had the privilege to (virtually) join Shota Gvinepadze and his students at the Free University of Tbilisi and speak about &amp;ldquo;Advanced Git @ Mattermost&amp;rdquo; for a portion of their class time.
The following are my speaking notes from the session, slightly modified from the original slides for this format. Keep in mind that the command line examples are illustrative of my workflow, and not meant to be run in isolation.</description>
    </item>
    
    <item>
      <title>All About Emojis</title>
      <link>/blog/all-about-emojis/</link>
      <pubDate>Thu, 26 Mar 2020 12:00:00 -0500</pubDate>
      
      <guid>/blog/all-about-emojis/</guid>
      <description>In person, you can easily tell someone&amp;rsquo;s mood based on their body language and how they speak, but that&amp;rsquo;s much more difficult with text alone. Emojis are a great way to add tone to a piece of text and also help make text-based conversation feel more casual, relaxed, and fun. Thanks to emojis, we can chat with much more real emotion than you might get by being careful about your word choice or by including just the right number of exclamation marks and periods at the end of a sentence.</description>
    </item>
    
    <item>
      <title>Maintaining Consistency in Codebases with Go vet</title>
      <link>/blog/maintaining-consistency-in-codebases-with-go-vet/</link>
      <pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/maintaining-consistency-in-codebases-with-go-vet/</guid>
      <description>Maintaining success in a large open-source project is one of the key objectives of Mattermost. We have hundreds of contributors and we want to create a project that could serve as a model in the Go community. Having said that, following idiomatic Go principles is the thing that we care most about while maintaining our code consistency. For this specific task, we utilized go vet and with this blog post, I would like to explain how we pushed the limits of this tool by extending it.</description>
    </item>
    
    <item>
      <title>Instrumenting Go code via AST, Part 2</title>
      <link>/blog/instrumenting-go-code-via-ast-2/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 -0400</pubDate>
      
      <guid>/blog/instrumenting-go-code-via-ast-2/</guid>
      <description>Welcome! This is the second part of our AST blog post series, expanding on the subject of utilizing Go AST libraries to automate and improve your workflow.
In this post I&amp;rsquo;ll discuss a rather common problem that comes up while working with Go code and the way we&amp;rsquo;ve solved it by sprinkling a little bit of AST magic dust. Let&amp;rsquo;s dive in.
Problem: A struct with no interface Let&amp;rsquo;s say you are working on a large code base that was not built with interfaces in mind, meaning, there are structs and methods attached to those structs, but there is no interface describing it.</description>
    </item>
    
    <item>
      <title>Layered Store and Struct Embedding in Go</title>
      <link>/blog/layered-store-and-struct-embedding/</link>
      <pubDate>Wed, 26 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/layered-store-and-struct-embedding/</guid>
      <description>One of the most important parts of the Mattermost source code is the one responsible for accessing the Mattermost database - the store. Every single database access is handled by the store, so we needed to find a way to extend its functionality while introducing as little complexity as possible. This is the reason behind the current layered approach using struct embedding.
Our store is responsible for storing and retrieving data, and sometimes we need to add functionality that is not strictly related to the database queries, for example, cache data or add instrumentation.</description>
    </item>
    
    <item>
      <title>Incorporating GolangCI-Lint at Mattermost</title>
      <link>/blog/incorporating-golangci-lint/</link>
      <pubDate>Mon, 13 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/incorporating-golangci-lint/</guid>
      <description>At Mattermost, we have traditionally relied on the trusty go vet and gofmt checks for our CI runs. Although it works well, there are a lot of other powerful linters out there which we&amp;rsquo;re potentially missing out on.
Speaking of linters, the first name that inevitably comes up is staticcheck. It&amp;rsquo;s a powerful metalinter with a whole slew of checks. But simply running staticcheck is not sufficient, because it misses out on other linters which perform a single task, but nevertheless are very powerful.</description>
    </item>
    
    <item>
      <title>On Hermes and Mattermost</title>
      <link>/blog/on-hermes-and-mattermost/</link>
      <pubDate>Fri, 20 Dec 2019 12:00:00 -0400</pubDate>
      
      <guid>/blog/on-hermes-and-mattermost/</guid>
      <description>With the upgrade to React Native 61 came the prospect of substantially improving performance of our Android app. How? Through the use of Hermes, Facebook’s new JavaScript engine. To say that we were excited is an understatement. And with that excitement came curiosity: how is this new JavaScript engine achieving performance boosts?
Let’s first chat a bit about JS engines in general.
How does your JavaScript code eventually get executed by the CPU on the machine?</description>
    </item>
    
    <item>
      <title>Onboarding with Mattermost</title>
      <link>/blog/onboarding-with-mattermost/</link>
      <pubDate>Fri, 20 Dec 2019 00:00:00 -0400</pubDate>
      
      <guid>/blog/onboarding-with-mattermost/</guid>
      <description>I recently joined Mattermost as a Remote Software Engineer and while I’ve worked in remote environments before, I was really surprised at how amazing this company is to work with. During my onboarding I discovered that they have really developed a culture built around being remote; one that allowed for me to feel as part of a larger team and always engaged, rather than separated from my peers and working alone.</description>
    </item>
    
    <item>
      <title>KubeCon NA 2019</title>
      <link>/blog/kubecon-na-2019/</link>
      <pubDate>Wed, 18 Dec 2019 12:00:00 -0400</pubDate>
      
      <guid>/blog/kubecon-na-2019/</guid>
      <description>It wasn’t my first time flying. It also wasn’t the first time I had arrived at the airport early enough to require multiple cups of coffee. As I sat at my gate, however, I did find myself wondering for the first time: had I ever heard the words “Lambda,” “stateful set&amp;rdquo;, and “yaml” while waiting to board?
You see, a bunch of us were coming from all over to attend KubeCon + CloudNativeCon North America 2019.</description>
    </item>
    
    <item>
      <title>Monitoring a Multi-Cluster Environment Using Prometheus Federation and Grafana</title>
      <link>/blog/cloud-monitoring/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 -0400</pubDate>
      
      <guid>/blog/cloud-monitoring/</guid>
      <description>Monitoring the state of your clusters is an effective way to discover bottlenecks in your multi-cluster production environment. It is one of the key challenges that development teams are facing and factors such as the team experience as well as the number and distribution of the applications can make things even more complex.
Better monitoring can help identify single points of failure. Being able to get information about things like the number of applications running on each node or the CPU and memory performance can help to get closer to zero downtime deployments.</description>
    </item>
    
    <item>
      <title>Localizing Matterpoll</title>
      <link>/blog/localizing-matterpoll/</link>
      <pubDate>Wed, 11 Dec 2019 10:49:35 +0200</pubDate>
      
      <guid>/blog/localizing-matterpoll/</guid>
      <description>Matterpoll is a plugin that allows users to create polls in Mattermost. Since Mattermost is localized in 16 different languages, it’s optimal that Matterpoll is similarly localized.
Because we rely on contributors to do the translations, we want to make it easy for them to translate new strings and determine whether already translated strings need to be updated because the &amp;ldquo;source&amp;rdquo; text changed. On the other hand, Matterpoll only has two maintainers (@kaakaa and me) and no infrastructure of its own to work with.</description>
    </item>
    
    <item>
      <title>Unit testing mmctl commands</title>
      <link>/blog/unit-testing-mmctl-commands/</link>
      <pubDate>Thu, 07 Nov 2019 00:00:00 -0400</pubDate>
      
      <guid>/blog/unit-testing-mmctl-commands/</guid>
      <description>Mattermost is starting a new Open Source campaign, this time around increasing the unit test coverage for the mmctl tool.
The mmctl tool is a CLI application that mimics the commands and features of the current Mattermost CLI tool and uses the Mattermost REST API to communicate with the server. Using the tool, you can control and manage several Mattermost servers without having to access the specific machine on which the server is running.</description>
    </item>
    
    <item>
      <title>Instrumenting Go code via AST</title>
      <link>/blog/instrumenting-go-code-via-ast/</link>
      <pubDate>Thu, 31 Oct 2019 00:00:00 -0400</pubDate>
      
      <guid>/blog/instrumenting-go-code-via-ast/</guid>
      <description>We&amp;rsquo;ve been working on integrating call tracing in the server to provide exact measurements of all API and DB calls. We&amp;rsquo;ve picked OpenTracing - a lovely open source project that allows you to setup trace reporting and enables you to support Distributed tracing.
Instrumenting your API handler in Go is very straightforward - setup a connection to a collection server supporting the OpenTracing spec (we&amp;rsquo;ve decided to use Jaeger) and wrap your code in spans.</description>
    </item>
    
    <item>
      <title>Debugging Using Charles</title>
      <link>/blog/debugging-using-charles/</link>
      <pubDate>Mon, 21 Oct 2019 00:00:00 -0400</pubDate>
      
      <guid>/blog/debugging-using-charles/</guid>
      <description>I recently acquired a copy of Charles, the well-known Web Debugging Proxy Application. I&amp;rsquo;ve actually stumbled across this product on multiple occasions, but never bothered to actually try it&amp;hellip; almost exclusively because I thought the website looked a little dated. In trying to suss out the root cause behind MM-19091, I needed a way to debug against our community servers but running with my local copy of the mattermost webapp. This would allow me to insert console.</description>
    </item>
    
    <item>
      <title>Avoiding Flaky Tests</title>
      <link>/blog/avoiding-flaky-tests/</link>
      <pubDate>Sun, 29 Sep 2019 00:00:00 -0400</pubDate>
      
      <guid>/blog/avoiding-flaky-tests/</guid>
      <description>&amp;ldquo;Your tests are failing.&amp;rdquo;
 This comment on a pull request is crushing. After all the effort you&amp;rsquo;ve spent writing your code, adding new unit tests, and rebasing your changes to make each commit almost a work of art: how could your tests possibly be failing?
Begrudgingly, you sign into your CI server only to realize the failing tests have nothing to do with your code. You think, &amp;ldquo;Hmm, maybe the code is more coupled than I expected.</description>
    </item>
    
    <item>
      <title>Hermes @ Chain React</title>
      <link>/blog/chain-react-2019-higlights-hermes/</link>
      <pubDate>Thu, 18 Jul 2019 12:00:00 -0400</pubDate>
      
      <guid>/blog/chain-react-2019-higlights-hermes/</guid>
      <description>- Yes, yes... - for real? - Yes I come all the way from Taiwan... and you? - Oh I&#39;m from here.. and what about you - me? hmm I flew 18 hours to get here (me) In short, the above is how the whole thing started. It is really interesting how people from all over the globe attended the event. It was a fun learning experience and even the unexpected was waiting on us.</description>
    </item>
    
    <item>
      <title>LDAP Nested Groups: Modelling and Representation in Code</title>
      <link>/blog/ldap-nested-groups-modelling-and-representation-in-code/</link>
      <pubDate>Wed, 05 Jun 2019 12:00:00 -0400</pubDate>
      
      <guid>/blog/ldap-nested-groups-modelling-and-representation-in-code/</guid>
      <description>LDAP Group Sync in Mattermost In Mattermost v5.8 we deployed LDAP group sync feature to enable Enterprise Edition customers to create and synchronize groups in Mattermost matching their LDAP groups. The goal was to ease onboarding by automatically adding group members to configured teams and channels.
With the upcoming Mattermost v5.12 we&amp;rsquo;re adding the ability to create teams and channels that are only accessible to those synced groups. This post describes what LDAP &amp;ldquo;nested groups&amp;rdquo; are and how we ended up modelling and representing them in code.</description>
    </item>
    
    <item>
      <title>Percona Live 2019 &amp; Database Replication</title>
      <link>/blog/percona-live-2019-database-replication/</link>
      <pubDate>Tue, 04 Jun 2019 12:00:00 -0400</pubDate>
      
      <guid>/blog/percona-live-2019-database-replication/</guid>
      <description>This past week, I was privileged to attend Percona Live 2019, an open-source database conference held this year in Austin, Texas. With the breadth of the sessions I attended being captured on a community.mattermost.com post, I wanted to use this blog post to dive into a recurring topic from the conference: database replication.
What is replication? Replication is a means by which data on one database server is automatically copied &amp;ndash; or replicated &amp;ndash; to other database servers called replicas.</description>
    </item>
    
    <item>
      <title>CanSecWest and Encryption in Mattermost</title>
      <link>/blog/cansecwest-2019-encryption/</link>
      <pubDate>Thu, 25 Apr 2019 12:00:00 -0400</pubDate>
      
      <guid>/blog/cansecwest-2019-encryption/</guid>
      <description>This year I had the opportunity to attend the security conference CanSecWest in Vancouver, BC. Like any security conference, it was full of exploits and interesting anecdotes. There were plenty of interesting talks, but this post focuses on a talk by Zhiniang Peng and Minrui Yang on the dangers of homomorphic encryption. This post gives a high level overview and avoids giving too much technical detail.
What is Homomorphic Encryption? Homomorphic encryption is defined as an encryption scheme which allows computations to be performed on ciphertext that, when decrypted, match the result of the operation as if it was applied to the plain text.</description>
    </item>
    
    <item>
      <title>Submitting Great PRs</title>
      <link>/blog/submitting-great-prs/</link>
      <pubDate>Thu, 24 Jan 2019 00:00:00 -0400</pubDate>
      
      <guid>/blog/submitting-great-prs/</guid>
      <description>If you want to submit good pull requests, start with our contribution checklist. Today, that page talks about what to fork, how to style your code, how to write unit tests and where to push your code. Implicit in all of that is the need to write great code, of course!
But this blog post isn&amp;rsquo;t about writing great code, it&amp;rsquo;s about making your pull request a great experience for you and your reviewers.</description>
    </item>
    
    <item>
      <title>Go: Idiomatic Error Handling</title>
      <link>/blog/idiomatic-error-handling/</link>
      <pubDate>Thu, 18 Oct 2018 00:00:00 -0400</pubDate>
      
      <guid>/blog/idiomatic-error-handling/</guid>
      <description>Go is an extremely opinionated programming language. import something in a file that&amp;rsquo;s not used? It won&amp;rsquo;t compile, and there&amp;rsquo;s no flag to override. While there are workarounds, the end result remains the same: Go files are never cluttered by unused imports. This is true for all Go code everywhere, making every Go project more accessible.
Not all Go opinions are enforced by the compiler. Some are documented in Effective Go, and yet others are reflected only in the coding style of the Go standard library.</description>
    </item>
    
    <item>
      <title>Plugin System Overhaul</title>
      <link>/blog/plugins-v2/</link>
      <pubDate>Wed, 18 Jul 2018 15:35:09 -0400</pubDate>
      
      <guid>/blog/plugins-v2/</guid>
      <description>Mattermost 5.2 will include major overhauls to the plugin system. Over the last six months of plugins being in beta, we&amp;rsquo;ve received a lot of great feedback from our community and customers building Mattermost plugins, as well as from our core team. We&amp;rsquo;ve taken this experience and feedback and used it to enhance our plugin system. This brings us a step closer to moving plugins out of beta and into a full stable release.</description>
    </item>
    
    <item>
      <title>Subpath Support</title>
      <link>/blog/subpath/</link>
      <pubDate>Mon, 25 Jun 2018 15:35:09 -0400</pubDate>
      
      <guid>/blog/subpath/</guid>
      <description>Mattermost 5.1 will include support for serving Mattermost from subpaths. This allows Mattermost to be exposed at something like https://example.com/company/mattermost, with your proxy server exposing different services at other subpaths. Subpath support is configured via the Site URL.
Using subpaths in production In production, after configuration and restart, the application server expects all HTTP requests to be anchored to the configured subpath. This includes static assets, API calls, and WebSockets. For convenience, the application server redirects any unexpected requests back into this subpath, e.</description>
    </item>
    
    <item>
      <title>npm@6</title>
      <link>/blog/npm-v6/</link>
      <pubDate>Tue, 22 May 2018 10:16:52 -0400</pubDate>
      
      <guid>/blog/npm-v6/</guid>
      <description>Heads up that with PR#1239, we&amp;rsquo;re effectively switching to npm@6.
Why the change? Previously, doing a fresh npm install would unexpectedly change package-lock.json. Upgrading to npm@6 should resolve this going forward.
What do I need to do? Make sure you&amp;rsquo;re running npm@6:
npm install -g npm@6 </description>
    </item>
    
    <item>
      <title>Platform Repository Splitting</title>
      <link>/blog/repo-split/</link>
      <pubDate>Mon, 04 Sep 2017 11:09:47 -0400</pubDate>
      
      <guid>/blog/repo-split/</guid>
      <description>A reminder that Mattermost will be separating the /platform repo into two repositories on September 6th, 2017:
 a new repository for webapp client code, hosted at github.com/mattermost/mattermost-webapp existing repository (/platform) renamed to /mattermost-server, containing the server code.  Why the change? Separates PRs for client and server with better naming conventions. This is similar to React Native and Redux repositories and helps us:
 work on one part of the system (webapp/server) without worrying about the other.</description>
    </item>
    
  </channel>
</rss>